//
//  MTStatusBarOverlayView.m
//  UserInterfaceLibrary
//
//  Created by Tomasz Krasnyk on 11-01-24.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "MTStatusBarOverlayView.h"
#import <QuartzCore/QuartzCore.h>
#import "MTStatusBarOverlayDefines.h"

//===========================================================
#pragma mark - Encoded Images
//===========================================================

unsigned char statusBarBackgroundGrey_png[] = {
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14,
	0x08, 0x02, 0x00, 0x00, 0x00, 0xe4, 0xc2, 0x41, 0x1e, 0x00, 0x00, 0x00,
	0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00,
	0x00, 0x7e, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xbc, 0xd2, 0xcd, 0x0a,
	0x40, 0x40, 0x14, 0x05, 0xe0, 0x99, 0xf2, 0x10, 0x92, 0xbc, 0x1f, 0xe1,
	0x61, 0xa4, 0xec, 0xcc, 0x53, 0x59, 0x58, 0x28, 0x69, 0xf2, 0xd3, 0x94,
	0x88, 0xac, 0xe6, 0xde, 0xbc, 0x82, 0x73, 0x17, 0xce, 0xfe, 0xeb, 0x9c,
	0x6e, 0x57, 0x67, 0x79, 0x91, 0xe6, 0x65, 0x9c, 0x24, 0xea, 0x43, 0xec,
	0x34, 0x35, 0x75, 0xa5, 0xbb, 0x7e, 0x08, 0xe3, 0x48, 0x7d, 0xce, 0x6a,
	0x67, 0xed, 0xae, 0x47, 0x81, 0xd1, 0xdb, 0x71, 0xc3, 0x66, 0xd9, 0x4f,
	0xd8, 0x58, 0xb7, 0xc3, 0x66, 0x5c, 0x1d, 0x6a, 0x02, 0x26, 0x82, 0x0d,
	0x79, 0xdc, 0x78, 0x41, 0x8f, 0x67, 0x81, 0x11, 0x6c, 0x63, 0x81, 0x21,
	0xf2, 0x78, 0x0f, 0xff, 0x73, 0x37, 0x62, 0x16, 0xfc, 0x81, 0xc0, 0x08,
	0x7a, 0x4c, 0x6b, 0x50, 0xf3, 0x0a, 0x30, 0x00, 0x1d, 0xed, 0x40, 0x55,
	0xe5, 0xd4, 0x12, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
	0xae, 0x42, 0x60, 0x82
};
unsigned int statusBarBackgroundGrey_png_len = 220;

unsigned char statusBarBackgroundGreySmall_png[] = {
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x14,
	0x08, 0x02, 0x00, 0x00, 0x00, 0xe4, 0xc2, 0x41, 0x1e, 0x00, 0x00, 0x00,
	0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00,
	0x03, 0x22, 0x69, 0x54, 0x58, 0x74, 0x58, 0x4d, 0x4c, 0x3a, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x78, 0x6d, 0x70, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22, 0xef, 0xbb, 0xbf,
	0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x57, 0x35, 0x4d, 0x30, 0x4d, 0x70,
	0x43, 0x65, 0x68, 0x69, 0x48, 0x7a, 0x72, 0x65, 0x53, 0x7a, 0x4e, 0x54,
	0x63, 0x7a, 0x6b, 0x63, 0x39, 0x64, 0x22, 0x3f, 0x3e, 0x20, 0x3c, 0x78,
	0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x78, 0x6d, 0x6c,
	0x6e, 0x73, 0x3a, 0x78, 0x3d, 0x22, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x3a,
	0x6e, 0x73, 0x3a, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x22, 0x20, 0x78, 0x3a,
	0x78, 0x6d, 0x70, 0x74, 0x6b, 0x3d, 0x22, 0x41, 0x64, 0x6f, 0x62, 0x65,
	0x20, 0x58, 0x4d, 0x50, 0x20, 0x43, 0x6f, 0x72, 0x65, 0x20, 0x35, 0x2e,
	0x30, 0x2d, 0x63, 0x30, 0x36, 0x30, 0x20, 0x36, 0x31, 0x2e, 0x31, 0x33,
	0x34, 0x37, 0x37, 0x37, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x30, 0x2f, 0x30,
	0x32, 0x2f, 0x31, 0x32, 0x2d, 0x31, 0x37, 0x3a, 0x33, 0x32, 0x3a, 0x30,
	0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x3e, 0x20,
	0x3c, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x20, 0x78, 0x6d, 0x6c,
	0x6e, 0x73, 0x3a, 0x72, 0x64, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x30, 0x32, 0x2f, 0x32, 0x32,
	0x2d, 0x72, 0x64, 0x66, 0x2d, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2d,
	0x6e, 0x73, 0x23, 0x22, 0x3e, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x64, 0x66, 0x3a, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x3d, 0x22, 0x22, 0x20,
	0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x3d, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f,
	0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31,
	0x2e, 0x30, 0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78,
	0x6d, 0x70, 0x4d, 0x4d, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x6d, 0x6d,
	0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e,
	0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x23, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x3a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x3d, 0x22, 0x41, 0x64, 0x6f,
	0x62, 0x65, 0x20, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f, 0x70,
	0x20, 0x43, 0x53, 0x35, 0x20, 0x4d, 0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f,
	0x73, 0x68, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d,
	0x70, 0x2e, 0x69, 0x69, 0x64, 0x3a, 0x32, 0x31, 0x44, 0x36, 0x33, 0x46,
	0x43, 0x37, 0x46, 0x43, 0x44, 0x46, 0x31, 0x31, 0x44, 0x46, 0x38, 0x42,
	0x31, 0x34, 0x44, 0x35, 0x30, 0x33, 0x33, 0x33, 0x38, 0x39, 0x45, 0x43,
	0x42, 0x45, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d,
	0x70, 0x2e, 0x64, 0x69, 0x64, 0x3a, 0x32, 0x31, 0x44, 0x36, 0x33, 0x46,
	0x43, 0x38, 0x46, 0x43, 0x44, 0x46, 0x31, 0x31, 0x44, 0x46, 0x38, 0x42,
	0x31, 0x34, 0x44, 0x35, 0x30, 0x33, 0x33, 0x33, 0x38, 0x39, 0x45, 0x43,
	0x42, 0x45, 0x22, 0x3e, 0x20, 0x3c, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x20,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x69, 0x69,
	0x64, 0x3a, 0x32, 0x31, 0x44, 0x36, 0x33, 0x46, 0x43, 0x35, 0x46, 0x43,
	0x44, 0x46, 0x31, 0x31, 0x44, 0x46, 0x38, 0x42, 0x31, 0x34, 0x44, 0x35,
	0x30, 0x33, 0x33, 0x33, 0x38, 0x39, 0x45, 0x43, 0x42, 0x45, 0x22, 0x20,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x64, 0x69,
	0x64, 0x3a, 0x32, 0x31, 0x44, 0x36, 0x33, 0x46, 0x43, 0x36, 0x46, 0x43,
	0x44, 0x46, 0x31, 0x31, 0x44, 0x46, 0x38, 0x42, 0x31, 0x34, 0x44, 0x35,
	0x30, 0x33, 0x33, 0x33, 0x38, 0x39, 0x45, 0x43, 0x42, 0x45, 0x22, 0x2f,
	0x3e, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x20, 0x3c, 0x2f, 0x72,
	0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x3e, 0x20, 0x3c, 0x2f, 0x78, 0x3a,
	0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x3e, 0x20, 0x3c, 0x3f, 0x78,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22,
	0x72, 0x22, 0x3f, 0x3e, 0x3a, 0x34, 0xd4, 0x3b, 0x00, 0x00, 0x00, 0x6b,
	0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0xbc, 0xd2, 0x4b, 0x0a, 0x80, 0x30,
	0x0c, 0x04, 0xd0, 0x06, 0xbc, 0xff, 0x42, 0x04, 0x77, 0xf6, 0x6e, 0xa5,
	0xf8, 0xa1, 0x58, 0x15, 0xb5, 0x22, 0x24, 0xc1, 0x2b, 0x38, 0x59, 0x74,
	0xf6, 0x8f, 0x19, 0x42, 0x68, 0x2b, 0xaf, 0xfb, 0x9d, 0x18, 0x42, 0xdf,
	0xb5, 0xb4, 0xde, 0x8f, 0x43, 0x32, 0xc7, 0x91, 0xd2, 0x59, 0x1c, 0x18,
	0x5a, 0xf6, 0x0b, 0x36, 0x53, 0x3e, 0x60, 0x13, 0x53, 0x46, 0x4d, 0xc3,
	0x22, 0xb0, 0x51, 0x83, 0x11, 0x96, 0x2a, 0xdb, 0x58, 0x0d, 0xc6, 0xb0,
	0x4d, 0x0d, 0x46, 0x84, 0xf1, 0x1e, 0xad, 0x73, 0x37, 0x51, 0x35, 0xfc,
	0x81, 0xc1, 0x18, 0x7a, 0xfc, 0xe0, 0x51, 0xf3, 0x09, 0x30, 0x00, 0xeb,
	0x44, 0x40, 0x9b, 0xbe, 0x24, 0xcf, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x49,
	0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};
unsigned int statusBarBackgroundGreySmall_png_len = 1015;


@interface MTStatusBarOverlayView()

- (void)addSubviewToBackgroundView:(UIView *)view;
@end


@implementation MTStatusBarOverlayView
@synthesize backgroundView = backgroundView_;
@synthesize detailView = detailView_;
@synthesize statusBarBackgroundImageView = statusBarBackgroundImageView_;
@synthesize statusLabel1 = statusLabel1_;
@synthesize statusLabel2 = statusLabel2_;
@synthesize hiddenStatusLabel = hiddenStatusLabel_;
@synthesize activityIndicator = activityIndicator_;
@synthesize finishedLabel = finishedLabel_;
@synthesize detailTextView = detailTextView_;
@synthesize historyTableView = historyTableView_;
@synthesize grayStatusBarImage = grayStatusBarImage_;
@synthesize grayStatusBarImageSmall = grayStatusBarImageSmall_;
@dynamic visibleStatusLabel;

#pragma mark - Get/Set 

- (UILabel *)visibleStatusLabel {
	if (self.hiddenStatusLabel == self.statusLabel1) {
		return self.statusLabel2;
	}

	return self.statusLabel1;
}

#pragma mark -

- (void)dealloc {
    hiddenStatusLabel_ = nil;
}

- (void) setupBackgroundView {
	// Create view that stores all the content
	backgroundView_ = [[UIControl alloc] initWithFrame:self.bounds];
	backgroundView_.clipsToBounds = YES;
	backgroundView_.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
	
	// Image of gray status bar
	NSData *pngData = [NSData dataWithBytesNoCopy:statusBarBackgroundGrey_png length:statusBarBackgroundGrey_png_len freeWhenDone:NO];
	grayStatusBarImage_ = [UIImage imageWithData:pngData];
	
	NSData *pngDataSmall = [NSData dataWithBytesNoCopy:statusBarBackgroundGreySmall_png length:statusBarBackgroundGreySmall_png_len freeWhenDone:NO];
	grayStatusBarImageSmall_ = [UIImage imageWithData:pngDataSmall];
	
	// Background-Image of the Content View
	statusBarBackgroundImageView_ = [[UIImageView alloc] initWithFrame:self.bounds];
	statusBarBackgroundImageView_.backgroundColor = [UIColor blackColor];
	statusBarBackgroundImageView_.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
	[self addSubviewToBackgroundView:statusBarBackgroundImageView_];
	
	// Activity Indicator
	activityIndicator_ = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    CGFloat margin = 3.0f;
	activityIndicator_.frame = CGRectMake(2*margin, margin, self.bounds.size.height - 2*margin, self.bounds.size.height - 2*margin);
    [activityIndicator_.layer setValue:@0.8f forKeyPath:@"transform.scale"];
	activityIndicator_.hidesWhenStopped = YES;
	[self addSubviewToBackgroundView:activityIndicator_];
	
	// Finished-Label
	finishedLabel_ = [[UILabel alloc] initWithFrame:CGRectMake(4,1,self.bounds.size.height, self.bounds.size.height-1)];
	finishedLabel_.backgroundColor = [UIColor clearColor];
	finishedLabel_.hidden = YES;
	finishedLabel_.text = kFinishedText;
	finishedLabel_.textAlignment = TextAlignmentCenter;
	finishedLabel_.font =  [UIFont fontWithName:@"Helvetica-Bold" size:kStatusLabelSize];
	[self addSubviewToBackgroundView:finishedLabel_];
	
	// Status Label 1 is first visible
	statusLabel1_ = [[UILabel alloc] initWithFrame:CGRectMake(30.0f, 0.0f, self.bounds.size.width - 60.0f, self.bounds.size.height-1)];
	statusLabel1_.backgroundColor = [UIColor clearColor];
	statusLabel1_.font = [UIFont fontWithName:@"Helvetica-Bold" size:kStatusLabelSize];
	statusLabel1_.textAlignment = TextAlignmentCenter;
	statusLabel1_.numberOfLines = 1;
	statusLabel1_.lineBreakMode = LineBreakModeByTruncatingTail;
	statusLabel1_.autoresizingMask = UIViewAutoresizingFlexibleWidth;
	[self addSubviewToBackgroundView:statusLabel1_];
	
	// Status Label 2 is hidden
	statusLabel2_ = [[UILabel alloc] initWithFrame:CGRectMake(30.0f, self.bounds.size.height,self.bounds.size.width - 60.0f , self.bounds.size.height-1)];
	statusLabel2_.backgroundColor = [UIColor clearColor];
	statusLabel2_.font = [UIFont fontWithName:@"Helvetica-Bold" size:kStatusLabelSize];
	statusLabel2_.textAlignment = TextAlignmentCenter;
	statusLabel2_.numberOfLines = 1;
	statusLabel2_.lineBreakMode = LineBreakModeByTruncatingTail;
	statusLabel2_.autoresizingMask = UIViewAutoresizingFlexibleWidth;
	[self addSubviewToBackgroundView:statusLabel2_];
	
	// the hidden status label at the beginning
	hiddenStatusLabel_ = statusLabel2_;
}

- (void) setupDetailView {
	// the detail view that is shown when the user touches the status bar in animation mode "FallDown"
	detailView_ = [[UIControl alloc] initWithFrame:kDefaultDetailViewFrame];
	detailView_.backgroundColor = [UIColor blackColor];
	detailView_.alpha = kDetailViewAlpha;
	detailView_.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin;
	
	// add rounded corners to detail-view
	detailView_.layer.masksToBounds = YES;
	detailView_.layer.cornerRadius = 10.0f;
	detailView_.layer.borderWidth = 2.5f;
	
	// Detail Text label
	detailTextView_ = [[UITextView alloc] initWithFrame:CGRectMake(0, kStatusBarHeight,
																   kDefaultDetailViewFrame.size.width, kDefaultDetailViewFrame.size.height - kStatusBarHeight)];
	detailTextView_.backgroundColor = [UIColor clearColor];
	[detailView_ addSubview:detailTextView_];
	
	
	historyTableView_ = [[UITableView alloc] initWithFrame:CGRectMake(0, kStatusBarHeight,
																	  kDefaultDetailViewFrame.size.width, kDefaultDetailViewFrame.size.height - kStatusBarHeight)];
	historyTableView_.delegate = nil;
	historyTableView_.rowHeight = kHistoryTableRowHeight;
	historyTableView_.separatorStyle = UITableViewCellSeparatorStyleNone;
	// make table view-background transparent
	historyTableView_.backgroundColor = [UIColor clearColor];
	historyTableView_.opaque = NO;
	historyTableView_.backgroundView = nil;
	
	[detailView_ addSubview:historyTableView_];
}

- (instancetype)initWithFrame:(CGRect)frame {
    self = [super initWithFrame:frame];
    if (self) {
		//self.backgroundColor = [UIColor yellowColor];
		
		[self setupDetailView];
		[self addSubview:detailView_];
		
		
		[self setupBackgroundView];
		[self addSubview:backgroundView_];
		
	}
    return self;
}

- (void)addSubviewToBackgroundView:(UIView *)view {
	view.userInteractionEnabled = NO;
	[self.backgroundView addSubview:view];
}


#pragma mark -

- (void)updateDetailTextViewHeight {
	CGRect f = self.detailTextView.frame;
	f.size.height = self.detailTextView.contentSize.height;
	self.detailTextView.frame = f;
}

- (void)setColorSchemeForStatusBarStyle:(UIStatusBarStyle)style {
	// gray status bar?
	// on iPad the Default Status Bar Style is black too
	if (style == UIStatusBarStyleDefault && !IsIPad) {
		self.statusLabel1.textColor = kLightThemeTextColor;
		self.statusLabel2.textColor = kLightThemeTextColor;
		self.finishedLabel.textColor = kLightThemeTextColor;
		self.activityIndicator.activityIndicatorViewStyle = kLightThemeActivityIndicatorViewStyle;
		self.detailView.backgroundColor = kLightThemeDetailViewBackgroundColor;
		self.detailView.layer.borderColor = [kLightThemeDetailViewBorderColor CGColor];
		self.historyTableView.separatorColor = kLightThemeDetailViewBorderColor;
		self.detailTextView.textColor = kLightThemeHistoryTextColor;
	} else {
		self.statusLabel1.textColor = kDarkThemeTextColor;
		self.statusLabel2.textColor = kDarkThemeTextColor;
		self.finishedLabel.textColor = kDarkThemeTextColor;
		self.activityIndicator.activityIndicatorViewStyle = kDarkThemeActivityIndicatorViewStyle;
		self.detailView.backgroundColor = kDarkThemeDetailViewBackgroundColor;
		self.detailView.layer.borderColor = [kDarkThemeDetailViewBorderColor CGColor];
		self.historyTableView.separatorColor = kDarkThemeDetailViewBorderColor;
		self.detailTextView.textColor = kDarkThemeHistoryTextColor;
	}
}

@end
